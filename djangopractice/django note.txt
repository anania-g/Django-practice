to create a new django project
->  django-admin startproject mysite

the files created by the command above are:-
manage.py :- A command-line utility that lets you interact with this Django project in various ways.

__init__.py :- An empty file that tells Python that this directory should be considered a Python package.

mysite/settings.py :- Settings/configuration for this Django project.

urls.py :- The URL declarations for this Django project; a “table of contents” of your Django-powered site.

asgi.py :- An entry-point for ASGI(Asynchronous Server Gateway interface)-compatible web servers to serve your project

wsgi.py :- An entry-point for WSGI(Web Server Gateway Interface)-compatible web servers to serve your project.

to create a new django app in the project
-> python manage.py startapp app_name

views.py:- functions to take request and give response
urls:- includes list of urlpatterns [ path('route',view,kwarg,name) ]
and insert an include() in the urlpatterns list of the project

model:-  is the single, definitive source of information about your data. 
        It contains the essential fields and behaviors of the data you’re storing.
Fields can be – e.g., CharField for character fields and DateTimeField for datetimes

=> we need to tell our projecet that the app is installed.
by including this in the settings.py
:- app_name.apps.appConfig
   polls.apps.PollsConfig

-> python manage.py makemigrations :- to create migrations for those changes
-> python manage.py migrate ::- to apply those changes to the database.

-> python manage.py sqlmigrate app_name:- command takes migration names and returns their SQL
-> python manage.py check :- this checks for any problems in your project without making migrations or touching the database.
-> python manage.py shell :- open interactive shell with API django 

In the shell:- from polls.models import Choice, Question
                Question.objects.all()
                from django.utils import timezone
                q = Question(question_text="What's new?", pub_date=timezone.now())
                q.save()
                q.id
                q.question_text
                q.pub_date

to represent the objeects meaningfully add these to the classes:-
 ->  def __str__(self):
        return self.question_text



-> Question.objects.filter(id=1)
-> Question.objects.filter(question_text__startswith='What')

for foreign key relation :-
-> q = Question.objects.get(pk=1)
-> q.choice_set.all()
-> q.choice_set.count()
-> q.choice_set.create(choice_text='Not much', votes=0)
-> c = q.choice_set.create(choice_text='Just hacking again', votes=0)
-> c.question
-> Choice.objects.filter(question__pub_date__year=current_year)
-> c = q.choice_set.filter(choice_text__startswith='Just hacking')
-> c.delete()







-> python manage.py createsuperuser :- creating superuser(admin)

Make the poll app modifiable in the admin got to polls/admin.py
-> from .models import Question
->admin.site.register(Question)


